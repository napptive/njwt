/**
 * Copyright 2023 Napptive
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package interceptors

import (
	"context"
	"fmt"
	"github.com/golang-jwt/jwt"
	"github.com/rs/zerolog/log"

	"github.com/napptive/nerrors/pkg/nerrors"
	"github.com/napptive/njwt/pkg/config"
	"github.com/napptive/njwt/pkg/njwt"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// WithZoneAwareJWTInterceptor creates a gRPC interceptor that verifies if the JWT received is
// valid attending to the zone that issued it.
func WithZoneAwareJWTInterceptor(config config.JWTConfig, secretProvider SecretProvider) grpc.ServerOption {
	return grpc.UnaryInterceptor(ZoneAwareJWTInterceptor(config, secretProvider))
}

// ZoneAwareJWTInterceptor verifies the JWT token and adds the claim information in the context
func ZoneAwareJWTInterceptor(config config.JWTConfig, secretProvider SecretProvider) grpc.UnaryServerInterceptor {
	return func(ctx context.Context,
		req interface{},
		info *grpc.UnaryServerInfo,
		handler grpc.UnaryHandler) (interface{}, error) {

		claim, err := authorizeZoneAwareJWTToken(ctx, config, secretProvider)
		if err != nil {
			return nil, nerrors.FromError(err).ToGRPC()
		}

		// add the claim information to the context metadata
		newCtx, err := AddClaimToContext(claim, ctx)
		if err != nil {
			return nil, err
		}
		return handler(newCtx, req)
	}
}

// authorizeZoneAwareJWTToken checks the token and returns the authxClaim
func authorizeZoneAwareJWTToken(ctx context.Context, config config.JWTConfig, secretProvider SecretProvider) (*njwt.Claim, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		return nil, nerrors.NewUnauthenticatedError("retrieving metadata failed")
	}

	token, ok := md[config.Header]
	if !ok {
		return nil, nerrors.NewUnauthenticatedError("no auth details supplied")
	}
	if token[0] == "" {
		return nil, nerrors.NewNotFoundError("error getting token. Log in to the platform")
	}

	// Check the token and get the authx claim
	claim := &njwt.Claim{PersonalClaim: &njwt.AuthxClaim{}}
	_, err := jwt.ParseWithClaims(token[0], claim, func(token *jwt.Token) (interface{}, error) {
		// From https://github.com/golang-jwt/jwt security notice related to
		// https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/
		// Don't forget to validate the alg is what you expect.
		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
			log.Error().Str("token", token.Raw).Msg("token not generated by napptive, invalid algorithm")
			return nil, fmt.Errorf("unexpected signing method: %v", token.Header["alg"])
		}
		napptiveClaim, ok := token.Claims.(*njwt.Claim)
		if !ok {
			log.Error().Str("token", token.Raw).Msg("token not generated by napptive, cannot extract claim")
			return nil, nerrors.NewInternalError("invalid token")
		}
		pc, ok := napptiveClaim.PersonalClaim.(*njwt.AuthxClaim)
		if !ok {
			log.Error().Str("token", token.Raw).Msg("token not generated by napptive, cannot extract personal claim")
			return nil, nerrors.NewInternalError("invalid token")
		}
		secret, err := secretProvider.GetZoneSecret(pc.ZoneID)
		if err != nil {
			log.Error().Err(err).Str("zone_id", pc.ZoneID).Msg("unable to retrieve secret associated with the given zone identifier.")
			return nil, nerrors.NewInternalError("invalid token")
		}
		return []byte(*secret), nil
	})

	if err != nil {
		castErr, ok := err.(*jwt.ValidationError)
		if !ok {
			return nil, nerrors.NewUnauthenticatedError("error recovering token [%s]", err.Error())
		}
		switch castErr.Errors {
		case jwt.ValidationErrorExpired:
			return nil, nerrors.NewUnauthenticatedError("[%s]. Please, log in to the platform again", err.Error())
		default:
			return nil, nerrors.NewUnauthenticatedError("error recovering token [%s]", err.Error())
		}
	}

	return claim, nil
}
